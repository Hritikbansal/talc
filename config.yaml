# Pretrained diffusers model path.
pretrained_model_path: "damo-vilab/text-to-video-ms-1.7b" #https://huggingface.co/damo-vilab/text-to-video-ms-1.7b/tree/main

# The folder where your training outputs will be placed.
output_dir: "/local2/hbansal/mst2vg/test_repo/"

# 'train jsonl'
train_path: "/local2/hbansal/multi_scene_data/train.jsonl"

# 'val jsonl'
val_path: "/local2/hbansal/multi_scene_data/val.jsonl"

# max_range_file (max_frames.json)
max_range_file: "/local/hbansal/mst2vg/talc/data/max_frames.json"

# root for video files
root: "/local2/hbansal/multi_scene_data/"

# if set to False, it will finetune the T2V model using merging captions
time_aligned_caption: True 

max_scenes: 4

# Num of epochs
num_train_epochs: 1

# You can train multiple datasets at once. They will be joined together for training.
# Simply remove the line you don't need, or keep them all for mixed training.

# Adds offset noise to training. See https://www.crosslabs.org/blog/diffusion-with-offset-noise
# If this is enabled, rescale_schedule will be disabled.
offset_noise_strength: 0.1
use_offset_noise: False

# Uses schedule rescale, also known as the "better" offset noise. See https://arxiv.org/pdf/2305.08891.pdf
# If this is enabled, offset noise will be disabled.
rescale_schedule: False  
## the original paper used it with v-prediction objective, not the epsilon-prediction

prediction_type: "epsilon"
# When True, this extends all items in all enabled datasets to the highest length. 
# For example, if you have 200 videos and 10 images, 10 images will be duplicated to the length of 200. 
extend_dataset: False

# Caches the latents (Frames-Image -> VAE -> Latent) to a HDD or SDD. 
# The latents will be saved under your training folder, and loaded automatically for training.
# This both saves memory and speeds up training and takes very little disk space.
cache_latents: False

# If you have cached latents set to `True` and have a directory of cached latents,
# you can skip the caching process and load previously saved ones. 
cached_latent_dir: null #/path/to/cached_latents

# Train the text encoder for the model. LoRA Training overrides this setting.
train_text_encoder: False

# https://github.com/cloneofsimo/lora (NOT Compatible with webui extension)
# This is the first, original implementation of LoRA by cloneofsimo.
# Use this version if you want to maintain compatibility to the original version.

# https://github.com/ExponentialML/Stable-LoRA/tree/main (Compatible with webui text2video extension)
# This is an implementation based off of the original LoRA repository by Microsoft, and the default LoRA method here.
# It works a different by using embeddings instead of the intermediate activations (Linear || Conv).
# This means that there isn't an extra function when doing low ranking adaption.
# It solely saves the weight differential between the initialized weights and updates. 

lr_scheduler: "constant_with_warmup"
# Choose whether or not ito save the full pretrained model weights for both checkpoints and after training.
# The only time you want this off is if you're doing full LoRA training.
save_pretrained_model: True


# 576x320
# Training data parameters
train_data:

  # The width and height in which you want your training data to be resized to.
  width: 256      
  height: 256

  # This will find the closest aspect ratio to your input width and height. 
  # For example, 512x512 width and height with a video of resolution 1280x720 will be resized to 512x256
  use_bucketing: False

  # The start frame index where your videos should start (Leave this at one for json and folder based training).
  sample_start_idx: 1

  # # The number of frames per scene. The higher this number, the higher the VRAM (acts similar to batch size).
  n_sample_frames: 8

# conditioning dropout prob
conditioning_dropout_prob: 0.0

# Learning rate for AdamW
learning_rate: 1e-5

# Weight decay. Higher = more regularization. Lower = closer to dataset.
adam_weight_decay: 0

# Optimizer parameters for the UNET. Overrides base learning rate parameters.
extra_unet_params: null
  #learning_rate: 1e-5
  #adam_weight_decay: 1e-4

# Optimizer parameters for the Text Encoder. Overrides base learning rate parameters.
extra_text_encoder_params: null
  #learning_rate: 5e-6
  #adam_weight_decay: 0.2

# How many batches to train. Not to be confused with video frames. The code supports bs = 1 only. The effective bs can be increased by using Gradient accumulation steps
train_batch_size: 1

# Maximum number of train steps. Model is saved after training.
# max_train_steps: 5000


# Saves a model every nth step.
checkpointing_steps: 1000

# How many steps to do for validation if sample_preview is enabled.
validation_steps: 100

# Which modules we want to unfreeze for the UNET. Advanced usage.
trainable_modules: "all"

# Seed for validation.
seed: 64

# Whether or not we want to use mixed precision with accelerate
mixed_precision: "fp16"

# This seems to be incompatible at the moment.
use_8bit_adam: True 

# Trades VRAM usage for speed. You lose roughly 20% of training speed, but save a lot of VRAM.
# If you need to save more VRAM, it can also be enabled for the text encoder, but reduces speed x2.
gradient_checkpointing: True
text_encoder_gradient_checkpointing: False
gradient_accumulation_steps: 4

# Xformers must be installed for best memory savings and performance (< Pytorch 2.0)
enable_xformers_memory_efficient_attention: False

# Use scaled dot product attention (Only available with >= Torch 2.0)
enable_torch_2_attn: True